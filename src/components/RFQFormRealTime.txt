// Add these imports to the top of RFQForm.tsx
import websocketService from '../services/websocket';
import { useEffect } from 'react';

// Add this inside the RFQForm component (after useState declarations):
useEffect(() => {
  // Connect to real-time system
  websocketService.connect('user123'); // Replace with actual user ID
  
  // Listen for real-time updates from other users
  websocketService.on('rfq_updated', (update: any) => {
    console.log('📡 Real-time update:', update);
    // Update form if another user changes something
    if (update.complianceStatus === 'error') {
      alert(\⚠️ Team member found compliance issue: \\);
    }
  });

  return () => {
    websocketService.disconnect();
  };
}, []);

// Modify the handleSpecificationChange function to include real-time updates:
const handleSpecificationChange = (field: string, value: any) => {
  const updatedSpecs = {
    ...formData.specifications,
    [field]: value
  };

  setFormData(prev => ({
    ...prev,
    specifications: updatedSpecs
  }));

  // Validate specifications in real-time
  if (formData.productType) {
    const validation = complianceValidator.validateSpecifications({
      productType: formData.productType,
      ...updatedSpecs
    });
    setValidationErrors(validation.errors);
    
    // 🚀 NEW: Broadcast changes to team in real-time
    const complianceStatus = validation.errors.length > 0 ? 'error' : 'valid';
    websocketService.updateRFQField(
      'rfq_123', // Replace with actual RFQ ID
      field,
      value,
      complianceStatus
    );
    
    // Alert team about critical compliance issues
    if (field === 'color' && formData.productType === 'cornflakes' && validation.errors.length > 0) {
      websocketService.sendComplianceAlert(
        'rfq_123',
        'Wrong cornflake color selected - this caused 9-month project failure before!',
        'error'
      );
    }
  }
};
