// File: src/components/analytics/AnalyticsDashboard.js

import React, { useState, useMemo } from 'react';
import {
  LineChart,
  Line,
  AreaChart,
  Area,
  BarChart,
  Bar,
  PieChart,
  Pie,
  Cell,
  XAxis,
  YAxis,
  CartesianGrid,
  Tooltip,
  Legend,
  ResponsiveContainer
} from 'recharts';
import { AutoIcon, cn, formatCurrency } from '../../lib/design-system';
import { Card, CardHeader, CardContent, Button, Badge } from '../ui';

// ===== METRIC CARD COMPONENT =====
const MetricCard = ({ 
  title, 
  value, 
  change, 
  changeType = 'increase',
  icon,
  format = 'number',
  className 
}) => {
  const formatValue = (val) => {
    switch (format) {
      case 'currency':
        return formatCurrency(val);
      case 'percentage':
        return `${val}%`;
      default:
        return val.toLocaleString();
    }
  };

  const getChangeColor = () => {
    if (changeType === 'increase') {
      return change > 0 ? 'text-green-600' : 'text-red-600';
    }
    return change > 0 ? 'text-red-600' : 'text-green-600';
  };

  return (
    <Card variant="elevated" className={cn('relative overflow-hidden', className)}>
      <CardContent className="p-6">
        <div className="flex items-center justify-between">
          <div>
            <p className="text-sm font-medium text-gray-600">{title}</p>
            <p className="text-2xl font-bold text-gray-900 mt-1">
              {formatValue(value)}
            </p>
            {change !== undefined && (
              <div className={cn('flex items-center mt-2', getChangeColor())}>
                <AutoIcon 
                  name={change > 0 ? 'TrendingUpIcon' : 'TrendingDownIcon'} 
                  className="w-4 h-4 mr-1" 
                />
                <span className="text-sm font-medium">
                  {Math.abs(change)}% from last month
                </span>
              </div>
            )}
          </div>
          
          {icon && (
            <div className="p-3 bg-blue-100 rounded-full">
              <AutoIcon name={icon} className="w-6 h-6 text-blue-600" />
            </div>
          )}
        </div>
        
        {/* Background decoration */}
        <div className="absolute top-0 right-0 -mt-2 -mr-2 w-16 h-16 bg-gradient-to-br from-blue-500/10 to-purple-500/10 rounded-full" />
      </CardContent>
    </Card>
  );
};

// ===== CHART WRAPPER COMPONENT =====
const ChartCard = ({ title, children, actions, className }) => (
  <Card variant="elevated" className={className}>
    <CardHeader className="flex flex-row items-center justify-between">
      <h3 className="text-lg font-semibold text-gray-900">{title}</h3>
      {actions && (
        <div className="flex items-center space-x-2">
          {actions}
        </div>
      )}
    </CardHeader>
    <CardContent className="p-6 pt-0">
      <div className="h-80">
        {children}
      </div>
    </CardContent>
  </Card>
);

// ===== CUSTOM TOOLTIP COMPONENT =====
const CustomTooltip = ({ active, payload, label, formatter }) => {
  if (active && payload && payload.length) {
    return (
      <div className="bg-white p-3 rounded-lg shadow-lg border border-gray-200">
        <p className="font-medium text-gray-900 mb-2">{label}</p>
        {payload.map((entry, index) => (
          <div key={index} className="flex items-center space-x-2">
            <div 
              className="w-3 h-3 rounded-full" 
              style={{ backgroundColor: entry.color }}
            />
            <span className="text-sm text-gray-600">
              {entry.dataKey}: {formatter ? formatter(entry.value) : entry.value}
            </span>
          </div>
        ))}
      </div>
    );
  }
  return null;
};

// ===== MAIN ANALYTICS DASHBOARD =====
export const AnalyticsDashboard = () => {
  const [timeRange, setTimeRange] = useState('30d');
  
  // Sample data - replace with real API calls
  const metrics = {
    totalRFQs: { value: 247, change: 12.5, icon: 'rfqs' },
    totalOrders: { value: 89, change: 8.2, icon: 'orders' },
    revenue: { value: 1250000, change: 15.3, icon: 'money', format: 'currency' },
    activeSuppliers: { value: 34, change: -2.1, icon: 'suppliers', changeType: 'decrease' }
  };

  // Chart data
  const revenueData = [
    { month: 'Jan', revenue: 890000, orders: 65 },
    { month: 'Feb', revenue: 1020000, orders: 72 },
    { month: 'Mar', revenue: 980000, orders: 68 },
    { month: 'Apr', revenue: 1150000, orders: 81 },
    { month: 'May', revenue: 1320000, orders: 89 },
    { month: 'Jun', revenue: 1250000, orders: 85 }
  ];

  const rfqStatusData = [
    { name: 'Active', value: 45, color: '#3B82F6' },
    { name: 'Pending', value: 30, color: '#F59E0B' },
    { name: 'Approved', value: 85, color: '#10B981' },
    { name: 'Rejected', value: 15, color: '#EF4444' }
  ];

  const categoryData = [
    { category: 'Grains', orders: 25, revenue: 450000 },
    { category: 'Dairy', orders: 18, revenue: 320000 },
    { category: 'Produce', orders: 22, revenue: 280000 },
    { category: 'Meat', orders: 15, revenue: 380000 },
    { category: 'Beverages', orders: 12, revenue: 180000 }
  ];

  const supplierPerformance = [
    { supplier: 'FreshCorp', orders: 15, rating: 4.8, onTime: 95 },
    { supplier: 'GreenFarms', orders: 12, rating: 4.6, onTime: 88 },
    { supplier: 'QualityMeats', orders: 8, rating: 4.9, onTime: 98 },
    { supplier: 'DairyBest', orders: 10, rating: 4.5, onTime: 92 },
    { supplier: 'OrganicPlus', orders: 6, rating: 4.7, onTime: 90 }
  ];

  const timeRangeOptions = [
    { value: '7d', label: '7 Days' },
    { value: '30d', label: '30 Days' },
    { value: '90d', label: '90 Days' },
    { value: '1y', label: '1 Year' }
  ];

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-2xl font-bold text-gray-900">Analytics Dashboard</h1>
          <p className="text-gray-600 mt-1">Track your FoodXchange performance and insights</p>
        </div>
        
        <div className="flex items-center space-x-3">
          <select
            value={timeRange}
            onChange={(e) => setTimeRange(e.target.value)}
            className="border border-gray-300 rounded-lg px-3 py-2 text-sm focus:outline-none focus:ring-2 focus:ring-blue-500"
          >
            {timeRangeOptions.map(option => (
              <option key={option.value} value={option.value}>
                {option.label}
              </option>
            ))}
          </select>
          
          <button className="h-8 px-3 py-1 border border-gray-300 rounded-md flex items-center gap-2 text-sm hover:bg-gray-50">
           <Download className="h-4 w-4" />
           Export Report
         </button>
        </div>
      </div>

      {/* Key Metrics */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
        <MetricCard
           title="Total RFQs"
           value={metrics.totalRFQs.value}
           change={metrics.totalRFQs.change}
           icon={metrics.totalRFQs.icon}
           className="bg-blue-50"
         />
        <MetricCard
           title="Total Orders"
           value={metrics.totalOrders.value}
           change={metrics.totalOrders.change}
           icon={metrics.totalOrders.icon}
           className="bg-green-50"
         />
        <MetricCard
          title="Revenue"
          value={metrics.revenue.value}
          change={metrics.revenue.change}
          icon={metrics.revenue.icon}
          format="currency"
        />
        <MetricCard
          title="Active Suppliers"
          value={metrics.activeSuppliers.value}
          change={metrics.activeSuppliers.change}
          changeType="decrease"
          icon={metrics.activeSuppliers.icon}
        />
      </div>

      {/* Charts Row 1 */}
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        {/* Revenue Trend */}
        <ChartCard 
          title="Revenue & Orders Trend"
          actions={
            <Button variant="ghost" size="sm" icon="external">
              View Details
            </Button>
          }
        >
          <ResponsiveContainer width="100%" height="100%">
            <LineChart data={revenueData}>
              <CartesianGrid strokeDasharray="3 3" />
              <XAxis dataKey="month" />
              <YAxis yAxisId="revenue" orientation="left" tickFormatter={formatCurrency} />
              <YAxis yAxisId="orders" orientation="right" />
              <Tooltip content={<CustomTooltip formatter={formatCurrency} />} />
              <Legend />
              <Area
                yAxisId="revenue"
                type="monotone"
                dataKey="revenue"
                fill="#3B82F6"
                fillOpacity={0.1}
                stroke="#3B82F6"
                strokeWidth={2}
              />
              <Line
                yAxisId="orders"
                type="monotone"
                dataKey="orders"
                stroke="#10B981"
                strokeWidth={2}
                dot={{ r: 4 }}
              />
            </LineChart>
          </ResponsiveContainer>
        </ChartCard>

        {/* RFQ Status Distribution */}
        <ChartCard title="RFQ Status Distribution">
          <ResponsiveContainer width="100%" height="100%">
            <PieChart>
              <Pie
                data={rfqStatusData}
                cx="50%"
                cy="50%"
                innerRadius={60}
                outerRadius={120}
                paddingAngle={2}
                dataKey="value"
              >
                {rfqStatusData.map((entry, index) => (
                  <Cell key={`cell-${index}`} fill={entry.color} />
                ))}
              </Pie>
              <Tooltip />
              <Legend />
            </PieChart>
          </ResponsiveContainer>
        </ChartCard>
      </div>

      {/* Charts Row 2 */}
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        {/* Category Performance */}
        <ChartCard title="Orders by Category">
          <ResponsiveContainer width="100%" height="100%">
            <BarChart data={categoryData}>
              <CartesianGrid strokeDasharray="3 3" />
              <XAxis dataKey="category" />
              <YAxis />
              <Tooltip content={<CustomTooltip />} />
              <Bar dataKey="orders" fill="#3B82F6" radius={[4, 4, 0, 0]} />
            </BarChart>
          </ResponsiveContainer>
        </ChartCard>

        {/* Revenue by Category */}
        <ChartCard title="Revenue by Category">
          <ResponsiveContainer width="100%" height="100%">
            <AreaChart data={categoryData}>
              <CartesianGrid strokeDasharray="3 3" />
              <XAxis dataKey="category" />
              <YAxis tickFormatter={formatCurrency} />
              <Tooltip content={<CustomTooltip formatter={formatCurrency} />} />
              <Area
                type="monotone"
                dataKey="revenue"
                stroke="#10B981"
                fill="#10B981"
                fillOpacity={0.6}
              />
            </AreaChart>
          </ResponsiveContainer>
        </ChartCard>
      </div>

      {/* Supplier Performance Table */}
      <Card variant="elevated">
        <CardHeader>
          <div className="flex items-center justify-between">
            <h3 className="text-lg font-semibold text-gray-900">Top Supplier Performance</h3>
            <Button variant="outline" size="sm" icon="view">
              View All
            </Button>
          </div>
        </CardHeader>
        <CardContent>
          <div className="overflow-x-auto">
            <table className="min-w-full divide-y divide-gray-200">
              <thead className="bg-gray-50">
                <tr>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Supplier
                  </th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Orders
                  </th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Rating
                  </th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    On-Time Delivery
                  </th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Status
                  </th>
                </tr>
              </thead>
              <tbody className="bg-white divide-y divide-gray-200">
                {supplierPerformance.map((supplier, index) => (
                  <tr key={supplier.supplier} className="hover:bg-gray-50">
                    <td className="px-6 py-4 whitespace-nowrap">
                      <div className="flex items-center">
                        <div className="w-8 h-8 bg-blue-100 rounded-full flex items-center justify-center mr-3">
                          <span className="text-sm font-medium text-blue-600">
                            {supplier.supplier.charAt(0)}
                          </span>
                        </div>
                        <div className="font-medium text-gray-900">
                          {supplier.supplier}
                        </div>
                      </div>
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                      {supplier.orders}
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap">
                      <div className="flex items-center">
                        <AutoIcon name="StarIcon" className="w-4 h-4 text-yellow-400 mr-1" />
                        <span className="text-sm text-gray-900">{supplier.rating}</span>
                      </div>
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap">
                      <div className="flex items-center">
                        <span className="text-sm text-gray-900 mr-2">{supplier.onTime}%</span>
                        <div className="w-16 bg-gray-200 rounded-full h-2">
                          <div
                            className="bg-green-500 h-2 rounded-full"
                            style={{ width: `${supplier.onTime}%` }}
                          />
                        </div>
                      </div>
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap">
                      <Badge variant={supplier.onTime >= 95 ? 'success' : 'warning'}>
                        {supplier.onTime >= 95 ? 'Excellent' : 'Good'}
                      </Badge>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        </CardContent>
      </Card>

      {/* Quick Actions */}
      <Card variant="gradient">
        <CardContent className="p-6">
          <div className="flex items-center justify-between">
            <div>
              <h3 className="text-lg font-semibold text-gray-900 mb-2">Quick Actions</h3>
              <p className="text-gray-600">Streamline your workflow with these shortcuts</p>
            </div>
            
            <div className="flex items-center space-x-3">
              <Button icon="create">
                New RFQ
              </Button>
              <Button variant="outline" icon="suppliers">
                Add Supplier
              </Button>
              <Button variant="outline" icon="analytics">
                Generate Report
              </Button>
            </div>
          </div>
        </CardContent>
      </Card>
    </div>
  );
};

// ===== ADDITIONAL CHART COMPONENTS =====

// Real-time metrics component
export const RealTimeMetrics = ({ data }) => (
  <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
    <div className="bg-green-50 rounded-lg p-4 border border-green-200">
      <div className="flex items-center justify-between">
        <div>
          <p className="text-sm text-green-600 font-medium">Active RFQs</p>
          <p className="text-2xl font-bold text-green-900">{data?.activeRFQs || 0}</p>
        </div>
        <div className="w-3 h-3 bg-green-500 rounded-full animate-pulse" />
      </div>
    </div>
    
    <div className="bg-blue-50 rounded-lg p-4 border border-blue-200">
      <div className="flex items-center justify-between">
        <div>
          <p className="text-sm text-blue-600 font-medium">Pending Orders</p>
          <p className="text-2xl font-bold text-blue-900">{data?.pendingOrders || 0}</p>
        </div>
        <div className="w-3 h-3 bg-blue-500 rounded-full animate-pulse" />
      </div>
    </div>
    
    <div className="bg-yellow-50 rounded-lg p-4 border border-yellow-200">
      <div className="flex items-center justify-between">
        <div>
          <p className="text-sm text-yellow-600 font-medium">Urgent Deadlines</p>
          <p className="text-2xl font-bold text-yellow-900">{data?.urgentDeadlines || 0}</p>
        </div>
        <div className="w-3 h-3 bg-yellow-500 rounded-full animate-pulse" />
      </div>
    </div>
  </div>
);
